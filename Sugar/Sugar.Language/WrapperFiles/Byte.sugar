struct Byte
{
    [private] byte: value;

    [public]
    constructor Byte()
    {
        value = 0;
    }

    [public]
    constructor Byte(byte: c)
    {
        value = c;
    }

    [public, static]
    implicit byte(Byte: i) => i.value;

    [public, static]
    implicit Byte(byte: i) => create Byte(i);

    [public, static]
    implicit char(Byte: i) => i.value as char;

    [public, static]
    implicit sbyte(Byte: i) => i.value as sbyte;

    [public, static]
    implicit short(Byte: i) => i.value as short;

    [public, static]
    implicit ushort(Byte: i) => i.value as ushort;

    [public, static]
    implicit int(Byte: i) => i.value as int;

    [public, static]
    implicit uint(Byte: i) => i.value as uint;

    [public, static]
    implicit long(Byte: i) => i.value as long;

    [public, static]
    implicit ulong(Byte: i) => i.value as ulong;

    [public, static]
    implicit float(Byte: i) => i.value as float;

    [public, static]
    implicit double(Byte: i) => i.value as double;

    [public, static]
    implicit decimal(Byte: i) => i.value as decimal;

    [public, static]
    explicit bool(Byte: i)
    {
        if(i.value == 0)
            return true;
        else
            return false;
    }

    [public]
    string ToString() => value + "";

    [public, static]
    operator byte +(Byte: a, Byte: b) => a.value + b.value;

    [public, static]
    operator byte -(Byte: a, Byte: b) => a.value - b.value;

    [public, static]
    operator byte *(Byte: a, Byte: b) => a.value * b.value;

    [public, static]
    operator byte /(Byte: a, Byte: b) => a.value / b.value;

    [public, static]
    operator byte %(Byte: a, Byte: b) => a.value % b.value;

    [public, static]
    operator byte ++(Byte: a) => a++;

    [public, static]
    operator byte --(Byte: a) => a--;

    [public, static]
    operator byte -(Byte: a) => -a;

    [public, static]
    operator byte &(Byte: a, Byte: b) => a.value & b.value;

    [public, static]
    operator byte |(Byte: a, Byte: b) => a.value | b.value;

    [public, static]
    operator byte <<(Byte: a, Byte: b) => a.value << b.value;

    [public, static]
    operator byte >>(Byte: a, Byte: b) => a.value >> b.value;

    [public, static]
    operator byte ~(Byte: a) => ~a.value;

    [public, static]
    operator bool ==(Byte: a, Byte: b) => a.value == b.value;

    [public, static]
    operator bool !=(Byte: a, Byte: b) => a.value != b.value;

    [public, static]
    operator bool >=(Byte: a, Byte: b) => a.value >= b.value;

    [public, static]
    operator bool <=(Byte: a, Byte: b) => a.value <= b.value;

    [public, static]
    operator bool <(Byte: a, Byte: b) => a.value < b.value;

    [public, static]
    operator bool >(Byte: a, Byte: b) => a.value > b.value;

    [public, static]
    operator byte +(Byte: a) => +a.value;

    [public, static]
    operator byte -(Byte: a) => -a.value; 
}